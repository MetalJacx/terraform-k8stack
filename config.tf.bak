provider "vcd" {
  user = "${var.vcd_user}"
  password = "${var.vcd_pass}"
  org = "${var.vcd_org}"
  url = "${var.vcd_url}"
  vdc = "${var.vcd_vdc}"
  max_retry_timeout = "${var.vcd_max_retry_timeout}"
  version = "~> 2.1"
}

resource "vcd_network_routed" "cp-network" {
  name = "${var.net_cp_name}"
  edge_gateway = "${var.vcd_edge}"
  gateway = "${cidrhost("${var.net_cp_cidr}", 1)}"
  dns1 = "${lookup("${var.net_cp_dns}", "DNS1", "208.67.222.222")}"
  dns2 = "${lookup("${var.net_cp_dns}", "DNS2", "1.1.1.1")}"

  static_ip_pool {
      start_address = "${cidrhost("${var.net_cp_cidr}", 11)}"
      end_address = "${cidrhost("${var.net_cp_cidr}", 100)}"
  }
}

resource "vcd_network_routed" "etcd-network" {
  name = "${var.net_etcd_name}"
  edge_gateway = "${var.vcd_edge}"
  gateway = "${cidrhost("${var.net_etcd_cidr}", 1)}"
  dns1 = "${lookup("${var.net_etcd_dns}", "DNS1", "208.67.222.222")}"
  dns2 = "${lookup("${var.net_etcd_dns}", "DNS2", "1.1.1.1")}"

  static_ip_pool {
      start_address = "${cidrhost("${var.net_etcd_cidr}", 11)}"
      end_address = "${cidrhost("${var.net_etcd_cidr}", 100)}"
  }
  depends_on = ["vcd_network_routed.cp-network"]
}

resource "vcd_network_routed" "work-network" {
  name = "${var.net_work_name}"
  edge_gateway = "${var.vcd_edge}"
  gateway = "${cidrhost("${var.net_work_cidr}", 1)}"
  dns1 = "${lookup("${var.net_work_dns}", "DNS1", "208.67.222.222")}"
  dns2 = "${lookup("${var.net_work_dns}", "DNS2", "1.1.1.1")}"

  static_ip_pool {
      start_address = "${cidrhost("${var.net_work_cidr}", 11)}"
      end_address = "${cidrhost("${var.net_work_cidr}", 100)}"
  }
  depends_on = ["vcd_network_routed.etcd-network"]
}

resource "vcd_vapp" "clustername" {
    name = "${var.cluster_name}"
    
    depends_on = ["vcd_network_routed.work-network"]
}

resource "vcd_vapp_vm" "cp" {
    count = 2
    vapp_name = "${vcd_vapp.clustername.name}"
    name = "${var.node_cp}-${count.index}"
    catalog_name = "${var.vcd_catalog}"
    template_name = "${var.vcd_template}"
    memory = 4096
    cpus =  1
    cpu_cores = 1

    network_name = "${vcd_network_routed.cp-network.name}"
    ip = "allocated"

    depends_on = ["vcd_vapp.clustername"]
}

resource "vcd_vapp_vm" "etcd" {
    count = 3
    vapp_name = "${vcd_vapp.clustername.name}"
    name = "${var.node_etcd}-${count.index}"
    catalog_name = "${var.vcd_catalog}"
    template_name = "${var.vcd_template}"
    memory = 4096
    cpus =  1
    cpu_cores = 1

    network_name = "${vcd_network_routed.etcd-network.name}"
    ip = "allocated"

    depends_on = ["vcd_vapp_vm.cp"]
}

resource "vcd_vapp_vm" "work" {
    count = 3
    vapp_name = "${vcd_vapp.clustername.name}"
    name = "${var.node_work}-${count.index}"
    catalog_name = "${var.vcd_catalog}"
    template_name = "${var.vcd_template}"
    memory = 8192
    cpus =  2
    cpu_cores = 1

    network_name = "${vcd_network_routed.work-network.name}"
    ip = "allocated"

    depends_on = ["vcd_vapp_vm.etcd"]
}

output "cp" {
  value = "${concat(list("${vcd_vapp_vm.cp.*.name}"), list("${vcd_vapp_vm.cp.*.ip}"))}"
}
output "etcd" {
  value = "${concat(list("${vcd_vapp_vm.etcd.*.name}"), list("${vcd_vapp_vm.etcd.*.ip}"))}"
}
output "worker" {
  value = "${concat(list("${vcd_vapp_vm.work.*.name}"), list("${vcd_vapp_vm.work.*.ip}"))}"
}

resource "vcd_firewall_rules" "cp-in" {
  edge_gateway = "${var.vcd_edge}"
  default_action = "drop"

  rule {
    description      = "HTTP-CP Ingress Controller"
    policy           = "allow"
    protocol         = "tcp"
    destination_port = "80"
    destination_ip   = "${var.net_cp_cidr}"
    source_port      = "any"
    source_ip        = "any"
  }
  rule {
    description      = "HTTPs-CP Ingress Controller"
    policy           = "allow"
    protocol         = "tcp"
    destination_port = "443"
    destination_ip   = "${var.net_cp_cidr}"
    source_port      = "any"
    source_ip        = "any"
  }
  rule {
    description      = "Rancher-CP Docker daemon TLS Port"
    policy           = "allow"
    protocol         = "tcp"
    destination_port = "2376"
    destination_ip   = "${var.net_cp_cidr}"
    source_port      = "any"
    source_ip        = "${var.net_rancher_ip}"
  }
  rule {
    description      = "Etcd-CP k8 apiserver"
    policy           = "allow"
    protocol         = "tcp"
    destination_port = "6443"
    destination_ip   = "${var.net_cp_cidr}"
    source_port      = "any"
    source_ip        = "${var.net_etcd_cidr}"
  }
  rule {
    description      = "Work-CP k8 apiserver"
    policy           = "allow"
    protocol         = "tcp"
    destination_port = "6443"
    destination_ip   = "${var.net_cp_cidr}"
    source_port      = "any"
    source_ip        = "${var.net_work_cidr}"
  }
  rule {
    description      = "Etcd-CP CNI VXLAN overlay"
    policy           = "allow"
    protocol         = "udp"
    destination_port = "8472"
    destination_ip   = "${var.net_cp_cidr}"
    source_port      = "any"
    source_ip        = "${var.net_etcd_cidr}"
  }
  rule {
    description      = "Work-CP CNI VXLAN overlay"
    policy           = "allow"
    protocol         = "udp"
    destination_port = "8472"
    destination_ip   = "${var.net_cp_cidr}"
    source_port      = "any"
    source_ip        = "${var.net_work_cidr}"
  }
  rule {
    description      = "Node Port Range"
    policy           = "allow"
    protocol         = "udp"
    destination_port = "30000-32767"
    destination_ip   = "${var.net_cp_cidr}"
    source_port      = "any"
    source_ip        = "any"
  }
  rule {
    description      = "Node Port Range"
    policy           = "allow"
    protocol         = "tcp"
    destination_port = "30000-32767"
    destination_ip   = "${var.net_cp_cidr}"
    source_port      = "any"
    source_ip        = "any"
  }  
}

resource "vcd_firewall_rules" "cp-out" {
  edge_gateway = "${var.vcd_edge}"
  default_action = "drop"

  rule {
    description      = "CP-Rancher Rancher Agent"
    policy           = "allow"
    protocol         = "tcp"
    destination_port = "443"
    destination_ip   = "${var.net_rancher_ip}"
    source_port      = "any"
    source_ip        = "${var.net_cp_cidr}"
  }  
  rule {
    description      = "CP-Etcd Client and Peer Communication"
    policy           = "allow"
    protocol         = "tcp"
    destination_port = "2379-2380"
    destination_ip   = "${var.net_etcd_cidr}"
    source_port      = "any"
    source_ip        = "${var.net_cp_cidr}"
  }  
  rule {
    description      = "CP-Etcd CNI VXLAN overlay"
    policy           = "allow"
    protocol         = "udp"
    destination_port = "8472"
    destination_ip   = "${var.net_etcd_cidr}"
    source_port      = "any"
    source_ip        = "${var.net_cp_cidr}"
  }  
  rule {
    description      = "CP-Work CNI VXLAN overlay"
    policy           = "allow"
    protocol         = "udp"
    destination_port = "8472"
    destination_ip   = "${var.net_work_cidr}"
    source_port      = "any"
    source_ip        = "${var.net_cp_cidr}"
  }  
  rule {
    description      = "CP-Etcd Kubelet"
    policy           = "allow"
    protocol         = "tcp"
    destination_port = "10250"
    destination_ip   = "${var.net_etcd_cidr}"
    source_port      = "any"
    source_ip        = "${var.net_cp_cidr}"
  }  
  rule {
    description      = "CP-Work Kubelet"
    policy           = "allow"
    protocol         = "tcp"
    destination_port = "10250"
    destination_ip   = "${var.net_work_cidr}"
    source_port      = "any"
    source_ip        = "${var.net_cp_cidr}"
  }  
}
#These are temperary until i include proxy box
resource "vcd_firewall_rules" "snat-out" {
  edge_gateway = "${var.vcd_edge}"
  default_action = "drop"

  rule {
    description      = "CP-Http"
    policy           = "allow"
    protocol         = "tcp"
    destination_port = "80"
    destination_ip   = "any"
    source_port      = "any"
    source_ip        = "${var.net_cp_cidr}"
  }  
  rule {
    description      = "Etcd-Http"
    policy           = "allow"
    protocol         = "tcp"
    destination_port = "80"
    destination_ip   = "any"
    source_port      = "any"
    source_ip        = "${var.net_etcd_cidr}"
  }
  rule {
    description      = "Work-Http"
    policy           = "allow"
    protocol         = "tcp"
    destination_port = "80"
    destination_ip   = "any"
    source_port      = "any"
    source_ip        = "${var.net_work_cidr}"
  }   
  rule {
    description      = "CP-Https"
    policy           = "allow"
    protocol         = "tcp"
    destination_port = "443"
    destination_ip   = "any"
    source_port      = "any"
    source_ip        = "${var.net_cp_cidr}"
  }  
  rule {
    description      = "Etcd-Https"
    policy           = "allow"
    protocol         = "tcp"
    destination_port = "443"
    destination_ip   = "any"
    source_port      = "any"
    source_ip        = "${var.net_etcd_cidr}"
  }
  rule {
    description      = "Work-Https"
    policy           = "allow"
    protocol         = "tcp"
    destination_port = "443"
    destination_ip   = "any"
    source_port      = "any"
    source_ip        = "${var.net_work_cidr}"
  }   
}

#These are temperary until i include proxy box
resource "vcd_snat" "cp-out" {
  edge_gateway = "${var.vcd_edge}"
  external_ip  = "${var.net_snat_ip}"
  internal_ip  = "${var.net_cp_cidr}"
}
resource "vcd_snat" "etcd-out" {
  edge_gateway = "${var.vcd_edge}"
  external_ip  = "${var.net_snat_ip}"
  internal_ip  = "${var.net_etcd_cidr}"
}
resource "vcd_snat" "work-out" {
  edge_gateway = "${var.vcd_edge}"
  external_ip  = "${var.net_snat_ip}"
  internal_ip  = "${var.net_work_cidr}"
}

resource "vcd_firewall_rules" "etcd-in" {
  edge_gateway = "${var.vcd_edge}"
  default_action = "drop"

  rule {
    description      = "Rancher-Etcd Docker daemon TLS Port"
    policy           = "allow"
    protocol         = "tcp"
    destination_port = "2376"
    destination_ip   = "${var.net_etcd_cidr}"
    source_port      = "any"
    source_ip        = "${var.net_rancher_ip}"
  }
  rule {
    description      = "CP-Etcd client and peer communication"
    policy           = "allow"
    protocol         = "tcp"
    destination_port = "2379-2380"
    destination_ip   = "${var.net_etcd_cidr}"
    source_port      = "any"
    source_ip        = "${var.net_cp_cidr}"
  }  
  rule {
    description      = "CP-Etcd CNI VXLAN overlay"
    policy           = "allow"
    protocol         = "udp"
    destination_port = "8472"
    destination_ip   = "${var.net_etcd_cidr}"
    source_port      = "any"
    source_ip        = "${var.net_cp_cidr}"
  }
  rule {
    description      = "Work-Etcd CNI VXLAN overlay"
    policy           = "allow"
    protocol         = "udp"
    destination_port = "8472"
    destination_ip   = "${var.net_etcd_cidr}"
    source_port      = "any"
    source_ip        = "${var.net_work_cidr}"
  }
  rule {
    description      = "CP-Etcd kubelet"
    policy           = "allow"
    protocol         = "TCP"
    destination_port = "10250"
    destination_ip   = "${var.net_etcd_cidr}"
    source_port      = "any"
    source_ip        = "${var.net_cp_cidr}"
  }
}

resource "vcd_firewall_rules" "etcd-out" {
  edge_gateway = "${var.vcd_edge}"
  default_action = "drop"

  rule {
    description      = "Etcd-Rancher Rancher Agent"
    policy           = "allow"
    protocol         = "tcp"
    destination_port = "443"
    destination_ip   = "${var.net_rancher_ip}"
    source_port      = "any"
    source_ip        = "${var.net_etcd_cidr}"
  }  
  rule {
    description      = "Etcd-CP Kubernetes apiserver"
    policy           = "allow"
    protocol         = "tcp"
    destination_port = "6443"
    destination_ip   = "${var.net_cp_cidr}"
    source_port      = "any"
    source_ip        = "${var.net_etcd_cidr}"
  }  
  rule {
    description      = "Etcd-CP CNI VXLAN overlay"
    policy           = "allow"
    protocol         = "udp"
    destination_port = "8472"
    destination_ip   = "${var.net_cp_cidr}"
    source_port      = "any"
    source_ip        = "${var.net_etcd_cidr}"
  }  
  rule {
    description      = "Etcd-Work CNI VXLAN overlay"
    policy           = "allow"
    protocol         = "udp"
    destination_port = "8472"
    destination_ip   = "${var.net_work_cidr}"
    source_port      = "any"
    source_ip        = "${var.net_etcd_cidr}"
  }  
}
resource "vcd_firewall_rules" "work-in" {
  edge_gateway = "${var.vcd_edge}"
  default_action = "drop"

  rule {
    description      = "HTTP-Work Ingress Controller"
    policy           = "allow"
    protocol         = "tcp"
    destination_port = "80"
    destination_ip   = "${var.net_work_cidr}"
    source_port      = "any"
    source_ip        = "any"
  }
  rule {
    description      = "HTTPs-Work Ingress Controller"
    policy           = "allow"
    protocol         = "tcp"
    destination_port = "443"
    destination_ip   = "${var.net_work_cidr}"
    source_port      = "any"
    source_ip        = "any"
  }
  rule {
    description      = "Rancher-Work Docker daemon TLS Port"
    policy           = "allow"
    protocol         = "tcp"
    destination_port = "2376"
    destination_ip   = "${var.net_work_cidr}"
    source_port      = "any"
    source_ip        = "${var.net_rancher_ip}"
  }
  rule {
    description      = "Etcd-Work CNI VXLAN overlay"
    policy           = "allow"
    protocol         = "udp"
    destination_port = "8472"
    destination_ip   = "${var.net_work_cidr}"
    source_port      = "any"
    source_ip        = "${var.net_etcd_cidr}"
  }
  rule {
    description      = "CP-Work CNI VXLAN overlay"
    policy           = "allow"
    protocol         = "udp"
    destination_port = "8472"
    destination_ip   = "${var.net_work_cidr}"
    source_port      = "any"
    source_ip        = "${var.net_cp_cidr}"
  }
  rule {
    description      = "CP-Work kubelet"
    policy           = "allow"
    protocol         = "tcp"
    destination_port = "10254"
    destination_ip   = "${var.net_work_cidr}"
    source_port      = "any"
    source_ip        = "${var.net_cp_cidr}"
  }
  rule {
    description      = "Node Port Range"
    policy           = "allow"
    protocol         = "udp"
    destination_port = "30000-32767"
    destination_ip   = "${var.net_work_cidr}"
    source_port      = "any"
    source_ip        = "any"
  }
  rule {
    description      = "Node Port Range"
    policy           = "allow"
    protocol         = "tcp"
    destination_port = "30000-32767"
    destination_ip   = "${var.net_work_cidr}"
    source_port      = "any"
    source_ip        = "any"
  }  
}

resource "vcd_firewall_rules" "work-out" {
  edge_gateway = "${var.vcd_edge}"
  default_action = "drop"

  rule {
    description      = "Work-Rancher Rancher Agent"
    policy           = "allow"
    protocol         = "tcp"
    destination_port = "443"
    destination_ip   = "${var.net_rancher_ip}"
    source_port      = "any"
    source_ip        = "${var.net_work_cidr}"
  }  
  rule {
    description      = "Work-CP Client and Peer Communication"
    policy           = "allow"
    protocol         = "tcp"
    destination_port = "6443"
    destination_ip   = "${var.net_cp_cidr}"
    source_port      = "any"
    source_ip        = "${var.net_work_cidr}"
  }  
  rule {
    description      = "Work-Etcd CNI VXLAN overlay"
    policy           = "allow"
    protocol         = "udp"
    destination_port = "8472"
    destination_ip   = "${var.net_etcd_cidr}"
    source_port      = "any"
    source_ip        = "${var.net_work_cidr}"
  }  
  rule {
    description      = "Work-CP CNI VXLAN overlay"
    policy           = "allow"
    protocol         = "udp"
    destination_port = "8472"
    destination_ip   = "${var.net_cp_cidr}"
    source_port      = "any"
    source_ip        = "${var.net_work_cidr}"
  }  
}

resource "vcd_inserted_media" "cp01" {
    vapp_name = "${vcd_vapp.clustername.name}"
    catalog = "${var.vcd_catalog}"
    name = "rancheros.iso"
    vm_name = "${vcd_vapp_vm.cp.0.name}"
    eject_force = true

    depends_on = ["vcd_vapp_vm.work"]
}
resource "vcd_inserted_media" "cp02" {
    vapp_name = "${vcd_vapp.clustername.name}"
    catalog = "${var.vcd_catalog}"
    name = "rancheros.iso"
    vm_name = "${vcd_vapp_vm.cp.1.name}"
    eject_force = true

    depends_on = ["vcd_vapp_vm.work"]
}

resource "vcd_inserted_media" "etcd01" {
    vapp_name = "${vcd_vapp.clustername.name}"
    catalog = "${var.vcd_catalog}"
    name = "rancheros.iso"
    vm_name = "${vcd_vapp_vm.etcd.0.name}"
    eject_force = true

    depends_on = ["vcd_vapp_vm.work"]
}
resource "vcd_inserted_media" "etcd02" {
    vapp_name = "${vcd_vapp.clustername.name}"
    catalog = "${var.vcd_catalog}"
    name = "rancheros.iso"
    vm_name = "${vcd_vapp_vm.etcd.1.name}"
    eject_force = true

    depends_on = ["vcd_vapp_vm.work"]
}
resource "vcd_inserted_media" "etcd03" {
    vapp_name = "${vcd_vapp.clustername.name}"
    catalog = "${var.vcd_catalog}"
    name = "rancheros.iso"
    vm_name = "${vcd_vapp_vm.etcd.2.name}"
    eject_force = true

    depends_on = ["vcd_vapp_vm.work"]
}

resource "vcd_inserted_media" "work01" {
    vapp_name = "${vcd_vapp.clustername.name}"
    catalog = "${var.vcd_catalog}"
    name = "rancheros.iso"
    vm_name = "${vcd_vapp_vm.work.0.name}"
    eject_force = true

    depends_on = ["vcd_vapp_vm.work"]
}
resource "vcd_inserted_media" "work02" {
    vapp_name = "${vcd_vapp.clustername.name}"
    catalog = "${var.vcd_catalog}"
    name = "rancheros.iso"
    vm_name = "${vcd_vapp_vm.work.1.name}"
    eject_force = true

    depends_on = ["vcd_vapp_vm.work"]
}
resource "vcd_inserted_media" "work03" {
    vapp_name = "${vcd_vapp.clustername.name}"
    catalog = "${var.vcd_catalog}"
    name = "rancheros.iso"
    vm_name = "${vcd_vapp_vm.work.2.name}"
    eject_force = true

    depends_on = ["vcd_vapp_vm.work"]
}